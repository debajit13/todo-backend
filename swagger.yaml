openapi: 3.0.0
info:
  title: Todo Backend
  description: A sample backend for a simple todo backend
  version: 0.1.0
  contact:
    name: Debajit Mallick
    email: mallickdebajit@gmail.com
    url: https://debajitmallick.com/

servers:
  - url: http://localhost:4000/api/v1
    description: use this if you are running the repo in localhost
  - url: https://api-todos-qcwl.onrender.com/api/v1
    description: use this if you want to try the the api connected with db

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /:
    get:
      tags:
        - Home
      summary: returns a json to welcome the user to todo-backend
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: Welcome to todo backend
  /login:
    post:
      tags:
        - Auth APIs
      summary: login with email and password
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: johndoe@gmail.com
                password:
                  type: string
                  default: 123456
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: User loggedIn successfully!
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        default: 1234556778a34r23r
                      firstName:
                        type: string
                        default: John
                      lastName:
                        type: string
                        default: Doe
                      email:
                        type: string
                        default: johndoe@gmail.com
                      __v:
                        type: number
                        default: 0
                      token:
                        type: string
                        default: dsadsda23231dsaweadaseqweqdsadwaewqewqeqeeq3213easdadads32adsda
        '400':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: User hasn't registered yet!
  /register:
    post:
      tags:
        - Auth APIs
      summary: register a new user
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  default: Jahn
                lastName:
                  type: string
                  default: Doe
                email:
                  type: string
                  default: janedoe@gmail.com
                password:
                  type: string
                  default: 123456
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: User created successfully!
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        default: 1234556778a34r23r
                      firstName:
                        type: string
                        default: Jahn
                      lastName:
                        type: string
                        default: Doe
                      email:
                        type: string
                        default: janedoe@gmail.com
                      __v:
                        type: number
                        default: 0
                      token:
                        type: string
                        default: dsadsda23231dsaweadaseqweqdsadwaewqewqeqeeq3213easdadads32adsda
        '400':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: User is already existed!
  /todos:
    get:
      tags:
        - Todo APIs
      summary: returns all the todos from the db
      security:
        - bearerAuth: []
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: All todos retrived successfully!
                  todos:
                    type: array
                    default: []
    post:
      tags:
        - Todo APIs
      summary: add a new todo to the todos db
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  default: test api title
                description:
                  type: string
                  default: test api desription
      responses:
        '201':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: todo added successfully!
                  todo:
                    type: object
                    default: {}
        '400':
          description: returns an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: title and description are required fields!
    delete:
      tags:
        - Todo APIs
      summary: delete a todo by Id from todos DB
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the todo you want to delete
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: todo deleted successfully!
                  status:
                    type: object
                    default: {}
        '404':
          description: returns an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: todo not found!
        '400':
          description: returns an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: "'id' is a required field!"
    put:
      tags:
        - Todo APIs
      summary: edit a todo by Id from todos DB
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the todo you want to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  default: test api title
                description:
                  type: string
                  default: test api desription
                isDone:
                  type: boolean
                  default: false
      responses:
        '200':
          description: returns an object
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: todo updated successfully!
        '422':
          description: returns an error if any of title or description are missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: title and description are required fields!
        '400':
          description: returns an error if id is missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: "'id' is a required field!"
